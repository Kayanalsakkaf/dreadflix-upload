# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:  # This defines global variables for your pipeline
  EKS_CLUSTER: "funny-metal-potato"
  DEPLOYMENT: "deployment/upload-service-deployment"
  CONTAINER: "upload-service"
  NAME_SPACE: "default"    

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: amazon/aws-cli:latest
  script:
    - echo "Compiling the code..."
    - aws eks update-kubeconfig --name $EKS_CLUSTER 
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 961341555113.dkr.ecr.us-east-1.amazonaws.com
    - REPOSITORY_URI=961341555113.dkr.ecr.us-east-1.amazonaws.com/upload-service
    - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
    - docker build -t $REPOSITORY_URI:latest  . 
    - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    - echo "Build completed."
    
unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - docker push $REPOSITORY_URI --all-tags
        # Setup kubectl with our EKS Cluster
    - echo "Update Kube Config"
    - aws eks update-kubeconfig --region eu-west-2 --name $EKS_CLUSTER
    - kubectl version
    - echo "Start the new deployment"
    - kubectl set image deployment/upload-service-deployment upload-service=$REPOSITORY_URI:961341555113.dkr.ecr.us-east-1.amazonaws.com/upload-service:latest -n default
    - echo "Application successfully deployed."
