variables:
  AWS_REPO: ${REGISTRY_IMAGE}/upload-service #change accordingly
  #DOCKER_HOST: tcp://docker:3001
  CLUSTER_NAME: funny-metal-potato
  TAG: latest
stages:
  - build
  - test
  - deploy app

#1.0 - Building the docker image and pushing it to AWS ECR Registry
build:
  stage: build
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - aws ecr get-login-password | docker login --username AWS --password-stdin ${REGISTRY_IMAGE} #account name is AccountnameDREAD?
    - docker build -t $AWS_REPO:TAG . 
    - docker push $AWS_REPO:TAG
  allow_failure: true

#2.0 - Testing the service
unit-test-job:
  stage: test
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"
  allow_failure: true

lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."
  allow_failure: true

#3.0 - Deploying the Golang service on AWS-EKS
deploy app on EKS:
  stage: deploy app
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-01-04/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
    - echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
    - kubectl version --client
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
  script:
    - aws eks update-kubeconfig --region REGION --name $CLUSTER_NAME
    - cd kubernetes-files
    - kubectl apply -f deployment.yaml    #Deploys the docker image
    - kubectl rollout status deployments
  allow_failure: true